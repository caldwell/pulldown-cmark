// Copyright 2015 Google Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//! CommonMark punctuation set based on spec and Unicode properties.

// Autogenerated by mk_puncttable.py

const PUNCT_MASKS_ASCII: [u16; 8] = [
    0x0000, // U+0000...U+000F
    0x0000, // U+0010...U+001F
    0xfffe, // U+0020...U+002F
    0xfc00, // U+0030...U+003F
    0x0001, // U+0040...U+004F
    0xf800, // U+0050...U+005F
    0x0001, // U+0060...U+006F
    0x7800, // U+0070...U+007F
];

const PUNCT_TAB: [u16; 167] = [
    0xa,    // U+00A0...U+00AF
    0xb,    // U+00B0...U+00BF
    0x37,   // U+0370...U+037F
    0x38,   // U+0380...U+038F
    0x55,   // U+0550...U+055F
    0x58,   // U+0580...U+058F
    0x5b,   // U+05B0...U+05BF
    0x5c,   // U+05C0...U+05CF
    0x5f,   // U+05F0...U+05FF
    0x60,   // U+0600...U+060F
    0x61,   // U+0610...U+061F
    0x66,   // U+0660...U+066F
    0x6d,   // U+06D0...U+06DF
    0x70,   // U+0700...U+070F
    0x7f,   // U+07F0...U+07FF
    0x83,   // U+0830...U+083F
    0x85,   // U+0850...U+085F
    0x96,   // U+0960...U+096F
    0x97,   // U+0970...U+097F
    0x9f,   // U+09F0...U+09FF
    0xa7,   // U+0A70...U+0A7F
    0xaf,   // U+0AF0...U+0AFF
    0xc7,   // U+0C70...U+0C7F
    0xc8,   // U+0C80...U+0C8F
    0xdf,   // U+0DF0...U+0DFF
    0xe4,   // U+0E40...U+0E4F
    0xe5,   // U+0E50...U+0E5F
    0xf0,   // U+0F00...U+0F0F
    0xf1,   // U+0F10...U+0F1F
    0xf3,   // U+0F30...U+0F3F
    0xf8,   // U+0F80...U+0F8F
    0xfd,   // U+0FD0...U+0FDF
    0x104,  // U+1040...U+104F
    0x10f,  // U+10F0...U+10FF
    0x136,  // U+1360...U+136F
    0x140,  // U+1400...U+140F
    0x166,  // U+1660...U+166F
    0x169,  // U+1690...U+169F
    0x16e,  // U+16E0...U+16EF
    0x173,  // U+1730...U+173F
    0x17d,  // U+17D0...U+17DF
    0x180,  // U+1800...U+180F
    0x194,  // U+1940...U+194F
    0x1a1,  // U+1A10...U+1A1F
    0x1aa,  // U+1AA0...U+1AAF
    0x1b5,  // U+1B50...U+1B5F
    0x1b6,  // U+1B60...U+1B6F
    0x1b7,  // U+1B70...U+1B7F
    0x1bf,  // U+1BF0...U+1BFF
    0x1c3,  // U+1C30...U+1C3F
    0x1c7,  // U+1C70...U+1C7F
    0x1cc,  // U+1CC0...U+1CCF
    0x1cd,  // U+1CD0...U+1CDF
    0x201,  // U+2010...U+201F
    0x202,  // U+2020...U+202F
    0x203,  // U+2030...U+203F
    0x204,  // U+2040...U+204F
    0x205,  // U+2050...U+205F
    0x207,  // U+2070...U+207F
    0x208,  // U+2080...U+208F
    0x230,  // U+2300...U+230F
    0x232,  // U+2320...U+232F
    0x276,  // U+2760...U+276F
    0x277,  // U+2770...U+277F
    0x27c,  // U+27C0...U+27CF
    0x27e,  // U+27E0...U+27EF
    0x298,  // U+2980...U+298F
    0x299,  // U+2990...U+299F
    0x29d,  // U+29D0...U+29DF
    0x29f,  // U+29F0...U+29FF
    0x2cf,  // U+2CF0...U+2CFF
    0x2d7,  // U+2D70...U+2D7F
    0x2e0,  // U+2E00...U+2E0F
    0x2e1,  // U+2E10...U+2E1F
    0x2e2,  // U+2E20...U+2E2F
    0x2e3,  // U+2E30...U+2E3F
    0x2e4,  // U+2E40...U+2E4F
    0x2e5,  // U+2E50...U+2E5F
    0x300,  // U+3000...U+300F
    0x301,  // U+3010...U+301F
    0x303,  // U+3030...U+303F
    0x30a,  // U+30A0...U+30AF
    0x30f,  // U+30F0...U+30FF
    0xa4f,  // U+A4F0...U+A4FF
    0xa60,  // U+A600...U+A60F
    0xa67,  // U+A670...U+A67F
    0xa6f,  // U+A6F0...U+A6FF
    0xa87,  // U+A870...U+A87F
    0xa8c,  // U+A8C0...U+A8CF
    0xa8f,  // U+A8F0...U+A8FF
    0xa92,  // U+A920...U+A92F
    0xa95,  // U+A950...U+A95F
    0xa9c,  // U+A9C0...U+A9CF
    0xa9d,  // U+A9D0...U+A9DF
    0xaa5,  // U+AA50...U+AA5F
    0xaad,  // U+AAD0...U+AADF
    0xaaf,  // U+AAF0...U+AAFF
    0xabe,  // U+ABE0...U+ABEF
    0xfd3,  // U+FD30...U+FD3F
    0xfe1,  // U+FE10...U+FE1F
    0xfe3,  // U+FE30...U+FE3F
    0xfe4,  // U+FE40...U+FE4F
    0xfe5,  // U+FE50...U+FE5F
    0xfe6,  // U+FE60...U+FE6F
    0xff0,  // U+FF00...U+FF0F
    0xff1,  // U+FF10...U+FF1F
    0xff2,  // U+FF20...U+FF2F
    0xff3,  // U+FF30...U+FF3F
    0xff5,  // U+FF50...U+FF5F
    0xff6,  // U+FF60...U+FF6F
    0x1010, // U+10100...U+1010F
    0x1039, // U+10390...U+1039F
    0x103d, // U+103D0...U+103DF
    0x1056, // U+10560...U+1056F
    0x1085, // U+10850...U+1085F
    0x1091, // U+10910...U+1091F
    0x1093, // U+10930...U+1093F
    0x10a5, // U+10A50...U+10A5F
    0x10a7, // U+10A70...U+10A7F
    0x10af, // U+10AF0...U+10AFF
    0x10b3, // U+10B30...U+10B3F
    0x10b9, // U+10B90...U+10B9F
    0x10ea, // U+10EA0...U+10EAF
    0x10f5, // U+10F50...U+10F5F
    0x10f8, // U+10F80...U+10F8F
    0x1104, // U+11040...U+1104F
    0x110b, // U+110B0...U+110BF
    0x110c, // U+110C0...U+110CF
    0x1114, // U+11140...U+1114F
    0x1117, // U+11170...U+1117F
    0x111c, // U+111C0...U+111CF
    0x111d, // U+111D0...U+111DF
    0x1123, // U+11230...U+1123F
    0x112a, // U+112A0...U+112AF
    0x1144, // U+11440...U+1144F
    0x1145, // U+11450...U+1145F
    0x114c, // U+114C0...U+114CF
    0x115c, // U+115C0...U+115CF
    0x115d, // U+115D0...U+115DF
    0x1164, // U+11640...U+1164F
    0x1166, // U+11660...U+1166F
    0x116b, // U+116B0...U+116BF
    0x1173, // U+11730...U+1173F
    0x1183, // U+11830...U+1183F
    0x1194, // U+11940...U+1194F
    0x119e, // U+119E0...U+119EF
    0x11a3, // U+11A30...U+11A3F
    0x11a4, // U+11A40...U+11A4F
    0x11a9, // U+11A90...U+11A9F
    0x11aa, // U+11AA0...U+11AAF
    0x11b0, // U+11B00...U+11B0F
    0x11c4, // U+11C40...U+11C4F
    0x11c7, // U+11C70...U+11C7F
    0x11ef, // U+11EF0...U+11EFF
    0x11f4, // U+11F40...U+11F4F
    0x11ff, // U+11FF0...U+11FFF
    0x1247, // U+12470...U+1247F
    0x12ff, // U+12FF0...U+12FFF
    0x16a6, // U+16A60...U+16A6F
    0x16af, // U+16AF0...U+16AFF
    0x16b3, // U+16B30...U+16B3F
    0x16b4, // U+16B40...U+16B4F
    0x16e9, // U+16E90...U+16E9F
    0x16fe, // U+16FE0...U+16FEF
    0x1bc9, // U+1BC90...U+1BC9F
    0x1da8, // U+1DA80...U+1DA8F
    0x1e95, // U+1E950...U+1E95F
];

const PUNCT_MASKS: [u16; 167] = [
    0b0000100010000010, // U+00A0...U+00AF
    0b1000100011000000, // U+00B0...U+00BF
    0b0100000000000000, // U+0370...U+037F
    0b0000000010000000, // U+0380...U+038F
    0b1111110000000000, // U+0550...U+055F
    0b0000011000000000, // U+0580...U+058F
    0b0100000000000000, // U+05B0...U+05BF
    0b0000000001001001, // U+05C0...U+05CF
    0b0000000000011000, // U+05F0...U+05FF
    0b0011011000000000, // U+0600...U+060F
    0b1110100000000000, // U+0610...U+061F
    0b0011110000000000, // U+0660...U+066F
    0b0000000000010000, // U+06D0...U+06DF
    0b0011111111111111, // U+0700...U+070F
    0b0000001110000000, // U+07F0...U+07FF
    0b0111111111111111, // U+0830...U+083F
    0b0100000000000000, // U+0850...U+085F
    0b0000000000110000, // U+0960...U+096F
    0b0000000000000001, // U+0970...U+097F
    0b0010000000000000, // U+09F0...U+09FF
    0b0000000001000000, // U+0A70...U+0A7F
    0b0000000000000001, // U+0AF0...U+0AFF
    0b0000000010000000, // U+0C70...U+0C7F
    0b0000000000010000, // U+0C80...U+0C8F
    0b0000000000010000, // U+0DF0...U+0DFF
    0b1000000000000000, // U+0E40...U+0E4F
    0b0000110000000000, // U+0E50...U+0E5F
    0b1111111111110000, // U+0F00...U+0F0F
    0b0000000000010111, // U+0F10...U+0F1F
    0b0011110000000000, // U+0F30...U+0F3F
    0b0000000000100000, // U+0F80...U+0F8F
    0b0000011000011111, // U+0FD0...U+0FDF
    0b1111110000000000, // U+1040...U+104F
    0b0000100000000000, // U+10F0...U+10FF
    0b0000000111111111, // U+1360...U+136F
    0b0000000000000001, // U+1400...U+140F
    0b0100000000000000, // U+1660...U+166F
    0b0001100000000000, // U+1690...U+169F
    0b0011100000000000, // U+16E0...U+16EF
    0b0000000001100000, // U+1730...U+173F
    0b0000011101110000, // U+17D0...U+17DF
    0b0000011111111111, // U+1800...U+180F
    0b0000000000110000, // U+1940...U+194F
    0b1100000000000000, // U+1A10...U+1A1F
    0b0011111101111111, // U+1AA0...U+1AAF
    0b1111110000000000, // U+1B50...U+1B5F
    0b0000000000000001, // U+1B60...U+1B6F
    0b0110000000000000, // U+1B70...U+1B7F
    0b1111000000000000, // U+1BF0...U+1BFF
    0b1111100000000000, // U+1C30...U+1C3F
    0b1100000000000000, // U+1C70...U+1C7F
    0b0000000011111111, // U+1CC0...U+1CCF
    0b0000000000001000, // U+1CD0...U+1CDF
    0b1111111111111111, // U+2010...U+201F
    0b0000000011111111, // U+2020...U+202F
    0b1111111111111111, // U+2030...U+203F
    0b1111111111101111, // U+2040...U+204F
    0b0111111111111011, // U+2050...U+205F
    0b0110000000000000, // U+2070...U+207F
    0b0110000000000000, // U+2080...U+208F
    0b0000111100000000, // U+2300...U+230F
    0b0000011000000000, // U+2320...U+232F
    0b1111111100000000, // U+2760...U+276F
    0b0000000000111111, // U+2770...U+277F
    0b0000000001100000, // U+27C0...U+27CF
    0b1111111111000000, // U+27E0...U+27EF
    0b1111111111111000, // U+2980...U+298F
    0b0000000111111111, // U+2990...U+299F
    0b0000111100000000, // U+29D0...U+29DF
    0b0011000000000000, // U+29F0...U+29FF
    0b1101111000000000, // U+2CF0...U+2CFF
    0b0000000000000001, // U+2D70...U+2D7F
    0b1111111111111111, // U+2E00...U+2E0F
    0b1111111111111111, // U+2E10...U+2E1F
    0b0111111111111111, // U+2E20...U+2E2F
    0b1111111111111111, // U+2E30...U+2E3F
    0b1111111111111111, // U+2E40...U+2E4F
    0b0011111111111100, // U+2E50...U+2E5F
    0b1111111100001110, // U+3000...U+300F
    0b1111111111110011, // U+3010...U+301F
    0b0010000000000001, // U+3030...U+303F
    0b0000000000000001, // U+30A0...U+30AF
    0b0000100000000000, // U+30F0...U+30FF
    0b1100000000000000, // U+A4F0...U+A4FF
    0b1110000000000000, // U+A600...U+A60F
    0b0100000000001000, // U+A670...U+A67F
    0b0000000011111100, // U+A6F0...U+A6FF
    0b0000000011110000, // U+A870...U+A87F
    0b1100000000000000, // U+A8C0...U+A8CF
    0b0001011100000000, // U+A8F0...U+A8FF
    0b1100000000000000, // U+A920...U+A92F
    0b1000000000000000, // U+A950...U+A95F
    0b0011111111111110, // U+A9C0...U+A9CF
    0b1100000000000000, // U+A9D0...U+A9DF
    0b1111000000000000, // U+AA50...U+AA5F
    0b1100000000000000, // U+AAD0...U+AADF
    0b0000000000000011, // U+AAF0...U+AAFF
    0b0000100000000000, // U+ABE0...U+ABEF
    0b1100000000000000, // U+FD30...U+FD3F
    0b0000001111111111, // U+FE10...U+FE1F
    0b1111111111111111, // U+FE30...U+FE3F
    0b1111111111111111, // U+FE40...U+FE4F
    0b1111111111110111, // U+FE50...U+FE5F
    0b0000110100001011, // U+FE60...U+FE6F
    0b1111011111101110, // U+FF00...U+FF0F
    0b1000110000000000, // U+FF10...U+FF1F
    0b0000000000000001, // U+FF20...U+FF2F
    0b1011100000000000, // U+FF30...U+FF3F
    0b1010100000000000, // U+FF50...U+FF5F
    0b0000000000111111, // U+FF60...U+FF6F
    0b0000000000000111, // U+10100...U+1010F
    0b1000000000000000, // U+10390...U+1039F
    0b0000000000000001, // U+103D0...U+103DF
    0b1000000000000000, // U+10560...U+1056F
    0b0000000010000000, // U+10850...U+1085F
    0b1000000000000000, // U+10910...U+1091F
    0b1000000000000000, // U+10930...U+1093F
    0b0000000111111111, // U+10A50...U+10A5F
    0b1000000000000000, // U+10A70...U+10A7F
    0b0000000001111111, // U+10AF0...U+10AFF
    0b1111111000000000, // U+10B30...U+10B3F
    0b0001111000000000, // U+10B90...U+10B9F
    0b0010000000000000, // U+10EA0...U+10EAF
    0b0000001111100000, // U+10F50...U+10F5F
    0b0000001111000000, // U+10F80...U+10F8F
    0b0011111110000000, // U+11040...U+1104F
    0b1101100000000000, // U+110B0...U+110BF
    0b0000000000000011, // U+110C0...U+110CF
    0b0000000000001111, // U+11140...U+1114F
    0b0000000000110000, // U+11170...U+1117F
    0b0010000111100000, // U+111C0...U+111CF
    0b1110100000000000, // U+111D0...U+111DF
    0b0011111100000000, // U+11230...U+1123F
    0b0000001000000000, // U+112A0...U+112AF
    0b1111100000000000, // U+11440...U+1144F
    0b0010110000000000, // U+11450...U+1145F
    0b0000000001000000, // U+114C0...U+114CF
    0b1111111111111110, // U+115C0...U+115CF
    0b0000000011111111, // U+115D0...U+115DF
    0b0000000000001110, // U+11640...U+1164F
    0b0001111111111111, // U+11660...U+1166F
    0b0000001000000000, // U+116B0...U+116BF
    0b0111000000000000, // U+11730...U+1173F
    0b0000100000000000, // U+11830...U+1183F
    0b0000000001110000, // U+11940...U+1194F
    0b0000000000000100, // U+119E0...U+119EF
    0b1000000000000000, // U+11A30...U+11A3F
    0b0000000001111111, // U+11A40...U+11A4F
    0b1101110000000000, // U+11A90...U+11A9F
    0b0000000000000111, // U+11AA0...U+11AAF
    0b0000001111111111, // U+11B00...U+11B0F
    0b0000000000111110, // U+11C40...U+11C4F
    0b0000000000000011, // U+11C70...U+11C7F
    0b0000000110000000, // U+11EF0...U+11EFF
    0b1111111111111000, // U+11F40...U+11F4F
    0b1000000000000000, // U+11FF0...U+11FFF
    0b0000000000011111, // U+12470...U+1247F
    0b0000000000000110, // U+12FF0...U+12FFF
    0b1100000000000000, // U+16A60...U+16A6F
    0b0000000000100000, // U+16AF0...U+16AFF
    0b0000111110000000, // U+16B30...U+16B3F
    0b0000000000010000, // U+16B40...U+16B4F
    0b0000011110000000, // U+16E90...U+16E9F
    0b0000000000000100, // U+16FE0...U+16FEF
    0b1000000000000000, // U+1BC90...U+1BC9F
    0b0000111110000000, // U+1DA80...U+1DA8F
    0b1100000000000000, // U+1E950...U+1E95F
];

pub(crate) fn is_ascii_punctuation(c: u8) -> bool {
    c < 128 && (PUNCT_MASKS_ASCII[(c / 16) as usize] & (1 << (c & 15))) != 0
}

pub(crate) fn is_punctuation(c: char) -> bool {
    let cp = c as u32;
    if cp < 128 {
        return is_ascii_punctuation(cp as u8);
    }
    if cp > 0x1E95F {
        return false;
    }
    let high = (cp / 16) as u16;
    match PUNCT_TAB.binary_search(&high) {
        Ok(index) => (PUNCT_MASKS[index] & (1 << (cp & 15))) != 0,
        _ => false,
    }
}

#[cfg(test)]
mod tests {
    use super::{is_ascii_punctuation, is_punctuation};

    #[test]
    fn test_ascii() {
        assert!(is_ascii_punctuation(b'!'));
        assert!(is_ascii_punctuation(b'@'));
        assert!(is_ascii_punctuation(b'~'));
        assert!(!is_ascii_punctuation(b' '));
        assert!(!is_ascii_punctuation(b'0'));
        assert!(!is_ascii_punctuation(b'A'));
        assert!(!is_ascii_punctuation(0xA1));
    }

    #[test]
    fn test_unicode() {
        assert!(is_punctuation('~'));
        assert!(!is_punctuation(' '));

        assert!(is_punctuation('\u{00A1}'));
        assert!(is_punctuation('\u{060C}'));
        assert!(is_punctuation('\u{FF65}'));
        assert!(is_punctuation('\u{1BC9F}'));
        assert!(!is_punctuation('\u{1BCA0}'));
    }
}
